// src/cli/generate-rpc-contract.ts
import { Project, SyntaxKind } from 'ts-morph';
import * as path from 'path';
import * as fs from 'fs';

const SERVICES_GLOB = 'src/**/*.service.ts'; // Può essere reso configurabile
const OUTPUT_PATH = 'src/rpc-contract.generated.ts';

const project = new Project({
  tsConfigFilePath: 'tsconfig.json', // Assunto relativo alla root repo
});

const sourceFiles = project.addSourceFilesAtPaths(SERVICES_GLOB);

const methodLines: string[] = [];
const methodNames: string[] = [];
const importTypes = new Set<string>();

function pascalToKebab(name: string) {
  return name.replace(/Service$/, '').replace(/[A-Z]/g, (l, i) => (i ? '-' : '') + l.toLowerCase());
}

for (const file of sourceFiles) {
  const classes = file.getClasses();

  for (const cls of classes) {
    const serviceName = cls.getName();
    if (!serviceName) continue;

    const serviceAlias = pascalToKebab(serviceName); // es: UserService → user

    const methods = cls.getMethods().filter(m =>
      m.getDecorators().some(d => d.getName() === 'DirectMethod'),
    );

    if (methods.length === 0) continue;

    methodLines.push(`  ${serviceAlias}: {`);
    for (const method of methods) {
      const name = method.getName();
      const params = method.getParameters();
      const paramType = params.length === 1
        ? params[0].getType().getText(method)
        : params.length === 0
        ? 'void'
        : `[${params.map(p => p.getType().getText(method)).join(', ')}]`;

      const returnType = method.getReturnType().getText(method);

      // Raccolta tipi custom da importare
      [paramType, returnType].forEach(t => {
        if (/^[A-Z]/.test(t) && !t.includes('.') && !t.startsWith('Promise')) {
          importTypes.add(t.replace(/^Promise<(.+)>$/, '$1'));
        }
      });

      methodLines.push(`    ${name}: (input: ${paramType}) => ${returnType},`);
      methodNames.push(`'${serviceAlias}.${name}'`);
    }
    methodLines.push(`  },`);
  }
}

const importsLine =
  importTypes.size > 0
    ? `import { ${Array.from(importTypes).sort().join(', ')} } from './dtos';`
    : '';

const output = `
// Auto-generated by @simply-direct/nestjs-core
${importsLine}

export type RpcMethodName = ${methodNames.join(' | ')};

export interface RpcContract {
${methodLines.join('\n')}
}
`;

fs.writeFileSync(path.resolve(OUTPUT_PATH), output.trimStart(), 'utf8');
console.log(`✅ RPC contract written to ${OUTPUT_PATH}`);
